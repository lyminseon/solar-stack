# =========================
# Global (@ http context)
# =========================
# resolver 127.0.0.11 8.8.8.8 1.1.1.1 ipv6=off valid=30s;

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''        close;
}

# client_max_body_size 200m;

# =========================
# HTTP (80): ACME만 허용, 그 외 HTTPS로 리다이렉트 (59.0.196.26에서만)
# =========================
server {
  listen 59.0.196.26:80 default_server;
  server_name _;

  # nginx 컨테이너 헬스체크
  location = /healthz { return 200; }

  # ACME challenge (certbot)
  location ^~ /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  # Everything else -> HTTPS
  location / {
    return 301 https://$host$request_uri;
  }
}

# apex → www 리다이렉트 (80) - 59.0.196.26에서만
server {
  listen 59.0.196.26:80;
  server_name greenfesco.com;
  location / { return 301 https://www.greenfesco.com$request_uri; }
}

# apex → www 리다이렉트 (443) - 59.0.196.26에서만
server {
  listen 59.0.196.26:443 ssl;
  http2 on;
  server_name greenfesco.com;

  ssl_certificate      /etc/letsencrypt/live/www.greenfesco.com/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/www.greenfesco.com/privkey.pem;
  ssl_protocols        TLSv1.2 TLSv1.3;
  ssl_ciphers          HIGH:!aNULL:!MD5;

  return 301 https://www.greenfesco.com$request_uri;
}

# =========================
# HTTPS: www.greenfesco.com (59.0.196.26에서만)
# =========================
server {
  listen 59.0.196.26:443 ssl;
  server_name www.greenfesco.com;

  ssl_certificate      /etc/letsencrypt/live/www.greenfesco.com/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/www.greenfesco.com/privkey.pem;
  ssl_protocols        TLSv1.2 TLSv1.3;
  ssl_ciphers          HIGH:!aNULL:!MD5;

  add_header X-Content-Type-Options nosniff always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header Referrer-Policy strict-origin-when-cross-origin always;
  # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  # ---- 정적 포털 루트 (/usr/share/nginx/html/portal.html)
  root /usr/share/nginx/html;
  index portal.html index.html;

  # nginx 자체 헬스
  location = /healthz { return 200; }

  # 홈: portal.html 고정 반환
  location = / {
    try_files /portal.html =404;
  }

  # 정적/SPA: 파일 없으면 portal.html로 폴백
  location / {
    try_files $uri $uri/ /portal.html;
  }

  # ---- Upstream 변수 (Docker DNS 사용)
  set $airflow_upstream          airflow-api-server:8080;
  set $grafana_upstream          grafana:3000;
  set $superset_upstream         superset:8088;
  set $minio_upstream            minio:9000;
  set $minio_console_upstream    minio:9001;
  set $prometheus_upstream       prometheus:9090;
  set $loki_upstream             loki:3100;
  set $kafka_connect_upstream    kafka-connect:8083;
  set $mlflow_upstream           oauth2-proxy-mlflow:4180;
  set $keycloak_upstream         keycloak:8080;

  # Airflow 백엔드 헬스
  location = /healthz/airflow {
    proxy_pass http://$airflow_upstream/api/v2/version;
  }

  # ---- Airflow API (/airflow/)
  location = /airflow { return 301 /airflow/; }
  location /airflow/ {
    proxy_pass http://$airflow_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  443;
    proxy_set_header X-Forwarded-Prefix /airflow;
    proxy_http_version 1.1;
    proxy_set_header Upgrade      $http_upgrade;
    proxy_set_header Connection   $connection_upgrade;
    proxy_buffering off;
    proxy_redirect off;
    proxy_read_timeout 300s;
    proxy_next_upstream error timeout http_502 http_503 http_504;
  }

  # ---- Keycloak (/keycloak/)
  location = /keycloak { return 301 /keycloak/; }
  location /keycloak/ {
    proxy_pass http://$keycloak_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Port  443;
    proxy_set_header X-Forwarded-Prefix /keycloak;
    proxy_http_version 1.1;
    proxy_redirect off;
    proxy_read_timeout 120s;
    proxy_next_upstream error timeout http_502 http_503 http_504;
  }

  # ---- Grafana (/grafana/)
  location = /grafana { return 301 /grafana/; }
  location /grafana/ {
    proxy_pass http://$grafana_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_http_version 1.1;
    proxy_set_header Upgrade           $http_upgrade;
    proxy_set_header Connection        $connection_upgrade;
    proxy_read_timeout 300s;
    proxy_hide_header X-Frame-Options;
    add_header       X-Frame-Options "SAMEORIGIN" always;
  }

  # ---- Superset (/superset/)
  location = /superset { return 301 /superset/; }
  location /superset/ {
    proxy_pass http://$superset_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_http_version 1.1;
    proxy_redirect off;
  }

  # ---- MLflow (/mlflow/)
  location = /mlflow { return 301 /mlflow/; }
  location /mlflow/ {
    proxy_pass http://$mlflow_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Host  $host;
    proxy_set_header X-Forwarded-Prefix /mlflow;
    proxy_http_version 1.1;
    proxy_read_timeout 600s;
    proxy_hide_header X-Frame-Options;
    add_header       X-Frame-Options "SAMEORIGIN" always;
  }

  # ---- MinIO API (/minio/)
  location = /minio { return 301 /minio/; }
  location /minio/ {
    proxy_pass http://$minio_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_read_timeout 300s;
  }

  # ---- MinIO Console (/minio-console/)
  location = /minio-console { return 301 /minio-console/; }
  location /minio-console/ {
    proxy_pass http://$minio_console_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_read_timeout 300s;
  }

  # ---- Prometheus (/prometheus/)
  location = /prometheus { return 301 /prometheus/; }
  location /prometheus/ {
    proxy_pass http://$prometheus_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_read_timeout 300s;
    proxy_hide_header X-Frame-Options;
    add_header       X-Frame-Options "SAMEORIGIN" always;
  }

  # ---- Loki (/loki/)
  location = /loki { return 301 /loki/; }
  location /loki/ {
    proxy_pass http://$loki_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_read_timeout 300s;
  }

  # ---- Kafka Connect (/connect/)
  location = /connect { return 301 /connect/; }
  location /connect/ {
    proxy_pass http://$kafka_connect_upstream/;
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_read_timeout 300s;
  }
}
