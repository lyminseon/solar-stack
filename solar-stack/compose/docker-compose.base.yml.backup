x-env: &env
  env_file: [ ./.env.common ]

networks:
  appnet: { driver: bridge }

volumes:
  pg-data: {}
  minio-data: {}
  grafana-data: {}
  superset-data: {}
  ninjadb: {}
  loki-data: {}
  kafka-data: {}
  connect-data: {}
  redis-data: {}
  certbot-webroot: {}
  letsencrypt: {}

services:
  postgres:
    image: timescale/timescaledb:2.14.2-pg16
    <<: *env
    env_file: [ ./.env.db ]
    volumes: [ pg-data:/var/lib/postgresql/data ]
    expose: [ "5432" ]
    networks: [ appnet ]

  redis:
    image: redis:7
    volumes: [ redis-data:/data ]
    expose: [ "6379" ]
    networks: [ appnet ]

  kafka:
    image: bitnami/kafka:3.7
    <<: *env
    env_file: [ ./.env.kafka ]
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes: [ kafka-data:/bitnami/kafka ]
    expose: [ "9092" ]
    networks: [ appnet ]

  kafka-connect:
    image: quay.io/debezium/connect:2.7
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=connect-cluster
      - CONFIG_STORAGE_TOPIC=_connect_configs
      - OFFSET_STORAGE_TOPIC=_connect_offsets
      - STATUS_STORAGE_TOPIC=_connect_status
    volumes:
      - connect-data:/kafka/connect-data
      - ../git/kafka/connect:/kafka/connect:ro
    expose: [ "8083" ]
    depends_on: [ kafka ]
    networks: [ appnet ]

  portal:
    image: python:3.11-slim
    <<: *env
    env_file: [ ./.env.app ]
    working_dir: /srv/app
    command: bash -lc 'pip install -r requirements.txt && gunicorn solar.wsgi:application -c gunicorn.conf.py'
    # command: bash -lc 'gunicorn solar.wsgi:application -c gunicorn.conf.py'
    volumes:
      - ../git/portal/app:/srv/app
      - ../git/portal/requirements.txt:/srv/app/requirements.txt
      - ../git/portal/gunicorn.conf.py:/srv/app/gunicorn.conf.py
      - ../git/feast:/srv/feast
    depends_on: [ postgres ]
    expose: [ "8001" ]
    networks: [ appnet ]

  airflow-webserver:
    image: apache/airflow:2.10.2
    <<: *env
    env_file: [ ./.env.airflow ]
    command: webserver
    volumes:
      - ../git/airflow/dags:/opt/airflow/dags
      - ../git/airflow/plugins:/opt/airflow/plugins
      - ../git/airflow/requirements.txt:/opt/airflow/requirements.txt
    depends_on: [ airflow-scheduler, postgres, redis ]
    expose: [ "8080" ]
    networks: [ appnet ]

  airflow-scheduler:
    image: apache/airflow:2.10.2
    <<: *env
    env_file: [ ./.env.airflow ]
    command: scheduler
    volumes:
      - ../git/airflow/dags:/opt/airflow/dags
      - ../git/airflow/plugins:/opt/airflow/plugins
    depends_on: [ postgres, redis ]
    networks: [ appnet ]

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.15.1   # v 접두사 필수
    <<: *env
    env_file: [ ./.env.mlflow ]
    command: >
      mlflow server
      --backend-store-uri ${MLFLOW_BACKEND_URI}
      --artifacts-destination ${MLFLOW_ARTIFACTS_URI}
      --host 0.0.0.0 --port 5000
    volumes:
      - ../git/mlflow/mlflow.ini:/etc/mlflow/mlflow.ini
    expose: [ "5000" ]
    networks: [ appnet ]

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    <<: *env
    env_file: [ ./.env.minio ]
    command: server /data --console-address ':9001'
    volumes: [ minio-data:/data ]
    expose: [ "9000", "9001" ]
    networks: [ appnet ]

  grafana:
    image: grafana/grafana:11.1.0
    <<: *env
    env_file: [ ./.env.grafana ]
    volumes:
      - ../git/grafana/provisioning:/etc/grafana/provisioning
      - ../git/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    expose: [ "3000" ]
    networks: [ appnet ]

  superset:
    image: apache/superset:4.0.2
    volumes:
      - superset-data:/app/superset_home
      - ../git/superset/superset_config.py:/app/pythonpath/superset_config.py
      - ../git/superset/init:/docker-entrypoint-initdb.d
    depends_on: [ postgres ]
    expose: [ "8088" ]
    networks: [ appnet ]

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    <<: *env
    env_file: [ ./.env.keycloak ]
    command: [ "start", "--import-realm" ]
    volumes:
      - ../git/keycloak/themes/hudius:/opt/keycloak/themes/hudius
      - ../git/keycloak/realm-export/realm.json:/opt/keycloak/data/import/realm.json:ro
    depends_on: [ postgres ]
    expose: [ "8080" ]
    networks: [ appnet ]

  openmeter:
    image: ghcr.io/openmeterio/openmeter:latest
    <<: *env
    env_file: [ ./.env.openmeter ]
    volumes:
      - ../git/openmeter/config.yaml:/etc/openmeter/config.yaml
    expose: [ "8888" ]
    networks: [ appnet ]

  invoiceninja:
    image: invoiceninja/invoiceninja:5
    <<: *env
    env_file: [ ./.env.invoiceninja ]
    volumes:
      - ninjadb:/var/www/app/storage
      - ../git/invoiceninja/env-overrides.env:/overrides.env
    depends_on: [ postgres ]
    expose: [ "9000" ]
    networks: [ appnet ]

  vllm:
    image: vllm/vllm-openai:latest
    <<: *env
    env_file: [ ./.env.llm ]
    command: >
      --model ${LLM_MODEL_PATH_OR_ID}
      --dtype auto
      --port 8000
      --max-model-len 8192
    volumes:
      - /models:/models
      - ../git/llm/serving:/srv/llm
    expose: [ "8000" ]
    gpus: all                # Compose 표준 GPU 지정
    networks: [ appnet ]

  # NVIDIA GPU 메트릭 (태그 오류 회피 위해 우선 latest 권장; 운영전 고정 태그로 바꾸세요)
  dcgm-exporter:
    image: nvidia/dcgm-exporter:latest
    gpus: all
    expose: [ "9400" ]
    networks: [ appnet ]

  # promtail: 구성 파일을 반드시 마운트해야 함
  promtail:
    image: grafana/promtail:2.9.8
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ../git/loki/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
    expose: [ "9080" ]
    networks: [ appnet ]

  loki:
    image: grafana/loki:2.9.8
    volumes: [ loki-data:/loki ]
    expose: [ "3100" ]
    networks: [ appnet ]

  prometheus:
    image: prom/prometheus:v2.53.0
    <<: *env
    env_file: [ ./.env.prometheus ]
    volumes:
      - ../git/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    expose: [ "9090" ]
    networks: [ appnet ]

  # certbot 컨테이너 (webroot 방식)
  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot-webroot:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    entrypoint: sh
    command: -c "echo certbot helper"
    networks: [ appnet ]

  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ../git/nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot-webroot:/var/www/certbot          # HTTP-01 챌린지
      - letsencrypt:/etc/letsencrypt:ro           # TLS 인증서 사용
    ports:
      - "59.0.196.26:80:80"
      - "59.0.196.26:443:443"
    depends_on:
      - portal
      - airflow-webserver
      - mlflow
      - minio
      - grafana
      - superset
      - keycloak
      - vllm
      - prometheus
      - loki
    networks: [ appnet ]
