# =========================
# Global (@ http context)
# =========================
resolver 127.0.0.11 8.8.8.8 1.1.1.1 ipv6=off valid=30s;

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''        close;
}

# client_max_body_size 200m;

# =========================
# HTTP (80)
# =========================

# www.greenfesco.com : ACME 허용 + HTTPS로 리다이렉트
server {
  listen 80;
  server_name www.greenfesco.com;

  # nginx 헬스체크
  location = /healthz { return 200; }

  # ACME challenge (certbot)
  location ^~ /.well-known/acme-challenge/ {
    root /var/www/certbot;   # compose의 certbot-webroot 볼륨
  }

  # Everything else -> HTTPS
  location / {
    return 301 https://$host$request_uri;
  }
}

# greenfesco.com : ACME 허용 + www로 리다이렉트
server {
  listen 80;
  server_name greenfesco.com;

  # ACME challenge
  location ^~ /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  location / {
    return 301 https://www.greenfesco.com$request_uri;
  }
}

# =========================
# HTTPS: www.greenfesco.com
# =========================
# -----[ 최초 발급시 주석 ]: 인증서 생성 후 주석 해제
server {
  listen 443 ssl http2;
  server_name www.greenfesco.com;

  ssl_certificate      /etc/letsencrypt/live/www.greenfesco.com/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/www.greenfesco.com/privkey.pem;
  ssl_protocols        TLSv1.2 TLSv1.3;
  ssl_ciphers          HIGH:!aNULL:!MD5;

  add_header X-Content-Type-Options nosniff always;
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header Referrer-Policy strict-origin-when-cross-origin always;
  # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  # ---- 정적 포털 루트 (/usr/share/nginx/html/portal.html)
  root /usr/share/nginx/html;
  index portal.html index.html;

  # nginx 자체 헬스
  location = /healthz { return 200; }

  # 홈: portal.html 고정 반환
  location = / {
    try_files /portal.html =404;
  }

  # 정적/SPA: 파일 없으면 portal.html로 폴백
  location / {
    try_files $uri $uri/ /portal.html;
  }

  # ---- Upstream 변수 (Docker DNS 사용)
  set $airflow_upstream          airflow-api-server:8080;
  set $grafana_upstream          grafana:3000;
  set $superset_upstream         superset:8088;
  set $minio_upstream            minio:9000;
  set $minio_console_upstream    minio:9001;
  set $prometheus_upstream       prometheus:9090;
  set $loki_upstream             loki:3100;
  set $kafka_connect_upstream    kafka-connect:8083;
  set $mlflow_upstream           oauth2-proxy-mlflow:4180;  # OAuth2 Proxy 경유
  set $keycloak_upstream         keycloak:8080;

  # ---- Keycloak 인증 미들웨어
  location = /auth/check {
    internal;
    proxy_pass http://$keycloak_upstream/realms/solar-stack/protocol/openid-connect/userinfo;
    proxy_set_header Authorization $http_authorization;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
  }

  # ---- 보호된 서비스들 (예: /mlflow/)
  location /mlflow/ {
    auth_request /auth/check;
    auth_request_set $auth_resp_jwt $upstream_http_authorization;
    auth_request_set $auth_resp_user $upstream_http_x_user;

    proxy_pass http://$mlflow_upstream/;
    proxy_set_header Authorization $auth_resp_jwt;
    proxy_set_header X-User $auth_resp_user;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_set_header X-Forwarded-Host     $host;
    proxy_set_header X-Forwarded-Port     443;
    proxy_set_header X-Forwarded-Prefix   /mlflow;
    proxy_http_version 1.1;
    proxy_set_header Upgrade              $http_upgrade;
    proxy_set_header Connection           $connection_upgrade;
    proxy_buffering off;
    proxy_redirect off;
    proxy_read_timeout 300s;
    proxy_next_upstream error timeout http_502 http_503 http_504;
  }

  # ---- Airflow API (/airflow/)
  location = /airflow { return 301 /airflow/; }
  location /airflow/ {
    proxy_pass http://$airflow_upstream/;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_set_header X-Forwarded-Host     $host;
    proxy_set_header X-Forwarded-Port     443;
    proxy_set_header X-Forwarded-Prefix   /airflow;
    proxy_http_version 1.1;
    proxy_set_header Upgrade              $http_upgrade;
    proxy_set_header Connection           $connection_upgrade;
    proxy_buffering off;
    proxy_redirect off;
    proxy_read_timeout 300s;
    proxy_next_upstream error timeout http_502 http_503 http_504;
  }

  # ---- Keycloak (/keycloak)
  location /keycloak {
    proxy_pass http://$keycloak_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_redirect off;
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
  }

  # ---- Grafana (/grafana/)
  # GF_SERVER_ROOT_URL=https://www.greenfesco.com/grafana/
  # GF_SERVER_SERVE_FROM_SUB_PATH=true
  location = /grafana { return 301 /grafana/; }
  location /grafana/ {
    auth_request /auth/check;
    auth_request_set $auth_resp_jwt $upstream_http_authorization;
    auth_request_set $auth_resp_user $upstream_http_x_user;

    proxy_pass http://$grafana_upstream/;
    proxy_set_header Authorization $auth_resp_jwt;
    proxy_set_header X-User $auth_resp_user;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_http_version 1.1;
    proxy_set_header Upgrade              $http_upgrade;
    proxy_set_header Connection           $connection_upgrade;
    proxy_read_timeout 300s;
    proxy_hide_header X-Frame-Options;
    add_header       X-Frame-Options "SAMEORIGIN" always;
  }

  # ---- Superset (/superset/)
  location = /superset { return 301 /superset/; }
  location /superset/ {
    auth_request /auth/check;
    auth_request_set $auth_resp_jwt $upstream_http_authorization;
    auth_request_set $auth_resp_user $upstream_http_x_user;

    proxy_pass http://$superset_upstream/;
    proxy_set_header Authorization $auth_resp_jwt;
    proxy_set_header X-User $auth_resp_user;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_http_version 1.1;
    proxy_redirect off;
  }

  # ---- MinIO API (/minio/)
  location = /minio { return 301 /minio/; }
  location /minio/ {
    proxy_pass http://$minio_upstream/;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_read_timeout 300s;
  }

  # ---- MinIO Console (/minio-console/)
  location = /minio-console { return 301 /minio-console/; }
  location /minio-console/ {
    proxy_pass http://$minio_console_upstream/;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_read_timeout 300s;
  }

  # ---- Prometheus (/prometheus/)
  location = /prometheus { return 301 /prometheus/; }
  location /prometheus/ {
    proxy_pass http://$prometheus_upstream/;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_read_timeout 300s;
    proxy_hide_header X-Frame-Options;
    add_header       X-Frame-Options "SAMEORIGIN" always;
  }

  # ---- Loki (/loki/)
  location = /loki { return 301 /loki/; }
  location /loki/ {
    proxy_pass http://$loki_upstream/;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_read_timeout 300s;
  }

  # ---- Kafka Connect (/connect/)
  location = /connect { return 301 /connect/; }
  location /connect/ {
    proxy_pass http://$kafka_connect_upstream/;
    proxy_set_header Host                 $host;
    proxy_set_header X-Real-IP            $remote_addr;
    proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto    https;
    proxy_read_timeout 300s;
  }
}

# (선택) apex 443 → www 리다이렉트
# 인증서에 apex도 포함(-d greenfesco.com)되어 있을 때만 사용
# -----[ 최초 발급시 주석 ] 동일
server {
  listen 443 ssl http2;
  server_name greenfesco.com;

  ssl_certificate      /etc/letsencrypt/live/www.greenfesco.com/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/www.greenfesco.com/privkey.pem;

  return 301 https://www.greenfesco.com$request_uri;
}
